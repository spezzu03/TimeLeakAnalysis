// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser/Parser.fsy"

open AST

# 10 "Parser/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TRUE
  | FALSE
  | BITOR
  | BITAND
  | NOT
  | EQUALS
  | GREATER
  | LESS
  | LBRACK
  | RBRACK
  | ARROW
  | IF
  | FI
  | DO
  | OD
  | LOGAND
  | LOGOR
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAREN
  | RPAREN
  | EOF
  | SKIP
  | SEMI
  | ASSIGN
  | GUARD
  | IDENT of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BITOR
    | TOKEN_BITAND
    | TOKEN_NOT
    | TOKEN_EQUALS
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_ARROW
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_LOGAND
    | TOKEN_LOGOR
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EOF
    | TOKEN_SKIP
    | TOKEN_SEMI
    | TOKEN_ASSIGN
    | TOKEN_GUARD
    | TOKEN_IDENT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart_command
    | NONTERM_start_command
    | NONTERM_command
    | NONTERM_guarded_command
    | NONTERM_invariant
    | NONTERM_boolean
    | NONTERM_expression_0
    | NONTERM_expression_1

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TRUE  -> 0 
  | FALSE  -> 1 
  | BITOR  -> 2 
  | BITAND  -> 3 
  | NOT  -> 4 
  | EQUALS  -> 5 
  | GREATER  -> 6 
  | LESS  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | ARROW  -> 10 
  | IF  -> 11 
  | FI  -> 12 
  | DO  -> 13 
  | OD  -> 14 
  | LOGAND  -> 15 
  | LOGOR  -> 16 
  | TIMES  -> 17 
  | DIV  -> 18 
  | PLUS  -> 19 
  | MINUS  -> 20 
  | POW  -> 21 
  | LPAREN  -> 22 
  | RPAREN  -> 23 
  | EOF  -> 24 
  | SKIP  -> 25 
  | SEMI  -> 26 
  | ASSIGN  -> 27 
  | GUARD  -> 28 
  | IDENT _ -> 29 
  | NUM _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TRUE 
  | 1 -> TOKEN_FALSE 
  | 2 -> TOKEN_BITOR 
  | 3 -> TOKEN_BITAND 
  | 4 -> TOKEN_NOT 
  | 5 -> TOKEN_EQUALS 
  | 6 -> TOKEN_GREATER 
  | 7 -> TOKEN_LESS 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_ARROW 
  | 11 -> TOKEN_IF 
  | 12 -> TOKEN_FI 
  | 13 -> TOKEN_DO 
  | 14 -> TOKEN_OD 
  | 15 -> TOKEN_LOGAND 
  | 16 -> TOKEN_LOGOR 
  | 17 -> TOKEN_TIMES 
  | 18 -> TOKEN_DIV 
  | 19 -> TOKEN_PLUS 
  | 20 -> TOKEN_MINUS 
  | 21 -> TOKEN_POW 
  | 22 -> TOKEN_LPAREN 
  | 23 -> TOKEN_RPAREN 
  | 24 -> TOKEN_EOF 
  | 25 -> TOKEN_SKIP 
  | 26 -> TOKEN_SEMI 
  | 27 -> TOKEN_ASSIGN 
  | 28 -> TOKEN_GUARD 
  | 29 -> TOKEN_IDENT 
  | 30 -> TOKEN_NUM 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart_command 
    | 1 -> NONTERM_start_command 
    | 2 -> NONTERM_command 
    | 3 -> NONTERM_command 
    | 4 -> NONTERM_command 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_guarded_command 
    | 8 -> NONTERM_guarded_command 
    | 9 -> NONTERM_invariant 
    | 10 -> NONTERM_invariant 
    | 11 -> NONTERM_boolean 
    | 12 -> NONTERM_boolean 
    | 13 -> NONTERM_boolean 
    | 14 -> NONTERM_boolean 
    | 15 -> NONTERM_boolean 
    | 16 -> NONTERM_boolean 
    | 17 -> NONTERM_boolean 
    | 18 -> NONTERM_boolean 
    | 19 -> NONTERM_boolean 
    | 20 -> NONTERM_boolean 
    | 21 -> NONTERM_boolean 
    | 22 -> NONTERM_boolean 
    | 23 -> NONTERM_boolean 
    | 24 -> NONTERM_boolean 
    | 25 -> NONTERM_expression_0 
    | 26 -> NONTERM_expression_0 
    | 27 -> NONTERM_expression_0 
    | 28 -> NONTERM_expression_0 
    | 29 -> NONTERM_expression_0 
    | 30 -> NONTERM_expression_0 
    | 31 -> NONTERM_expression_1 
    | 32 -> NONTERM_expression_1 
    | 33 -> NONTERM_expression_1 
    | 34 -> NONTERM_expression_1 
    | 35 -> NONTERM_expression_1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | BITOR  -> "BITOR" 
  | BITAND  -> "BITAND" 
  | NOT  -> "NOT" 
  | EQUALS  -> "EQUALS" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | ARROW  -> "ARROW" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | LOGAND  -> "LOGAND" 
  | LOGOR  -> "LOGOR" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | EOF  -> "EOF" 
  | SKIP  -> "SKIP" 
  | SEMI  -> "SEMI" 
  | ASSIGN  -> "ASSIGN" 
  | GUARD  -> "GUARD" 
  | IDENT _ -> "IDENT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | BITOR  -> (null : System.Object) 
  | BITAND  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | LOGAND  -> (null : System.Object) 
  | LOGOR  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | GUARD  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;3us;65535us;0us;2us;10us;8us;19us;9us;3us;65535us;11us;12us;15us;16us;21us;20us;1us;65535us;14us;15us;10us;65535us;11us;18us;15us;18us;21us;18us;22us;23us;27us;28us;34us;29us;35us;30us;36us;31us;37us;32us;53us;33us;24us;65535us;5us;6us;11us;38us;15us;38us;21us;38us;22us;38us;27us;38us;34us;38us;35us;38us;36us;38us;37us;38us;40us;41us;42us;43us;44us;45us;47us;48us;49us;50us;51us;52us;53us;39us;62us;55us;63us;56us;64us;57us;65us;58us;66us;59us;72us;60us;74us;61us;25us;65535us;5us;67us;11us;67us;15us;67us;21us;67us;22us;67us;27us;67us;34us;67us;35us;67us;36us;67us;37us;67us;40us;67us;42us;67us;44us;67us;47us;67us;49us;67us;51us;67us;53us;67us;62us;67us;63us;67us;64us;67us;65us;67us;66us;67us;68us;69us;72us;67us;74us;67us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;7us;11us;13us;24us;49us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;4us;1us;1us;1us;2us;1us;2us;6us;2us;25us;26us;27us;28us;29us;1us;3us;2us;4us;4us;2us;4us;7us;1us;4us;1us;5us;2us;5us;8us;1us;5us;1us;6us;1us;6us;2us;6us;8us;1us;6us;5us;7us;14us;15us;16us;17us;1us;7us;2us;8us;8us;1us;8us;1us;9us;5us;9us;14us;15us;16us;17us;1us;9us;1us;11us;1us;12us;1us;13us;5us;13us;14us;15us;16us;17us;5us;14us;14us;15us;16us;17us;5us;14us;15us;15us;16us;17us;5us;14us;15us;16us;16us;17us;5us;14us;15us;16us;17us;17us;5us;14us;15us;16us;17us;24us;1us;14us;1us;15us;1us;16us;1us;17us;11us;18us;19us;20us;21us;22us;23us;25us;26us;27us;28us;29us;12us;18us;19us;20us;21us;22us;23us;25us;26us;27us;28us;29us;34us;1us;18us;6us;18us;25us;26us;27us;28us;29us;2us;19us;22us;6us;19us;25us;26us;27us;28us;29us;2us;20us;23us;6us;20us;25us;26us;27us;28us;29us;1us;21us;1us;21us;6us;21us;25us;26us;27us;28us;29us;1us;22us;6us;22us;25us;26us;27us;28us;29us;1us;23us;6us;23us;25us;26us;27us;28us;29us;2us;24us;34us;1us;24us;6us;25us;25us;26us;27us;28us;29us;6us;25us;26us;26us;27us;28us;29us;6us;25us;26us;27us;27us;28us;29us;6us;25us;26us;27us;28us;28us;29us;6us;25us;26us;27us;28us;29us;29us;6us;25us;26us;27us;28us;29us;34us;6us;25us;26us;27us;28us;29us;35us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;30us;1us;31us;1us;31us;1us;32us;2us;33us;35us;1us;34us;1us;34us;1us;35us;1us;35us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;13us;20us;22us;25us;28us;30us;32us;35us;37us;39us;41us;44us;46us;52us;54us;57us;59us;61us;67us;69us;71us;73us;75us;81us;87us;93us;99us;105us;111us;113us;115us;117us;119us;131us;144us;146us;153us;156us;163us;166us;173us;175us;177us;184us;186us;193us;195us;202us;205us;207us;214us;221us;228us;235us;242us;249us;256us;258us;260us;262us;264us;266us;268us;270us;272us;274us;277us;279us;281us;283us;|]
let _fsyacc_action_rows = 76
let _fsyacc_actionTableElements = [|4us;32768us;11us;11us;13us;14us;25us;7us;29us;4us;0us;49152us;2us;32768us;24us;3us;26us;10us;0us;16385us;1us;32768us;27us;5us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;5us;16386us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;0us;16387us;1us;16388us;26us;10us;1us;16391us;26us;10us;4us;32768us;11us;11us;13us;14us;25us;7us;29us;4us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;2us;32768us;12us;13us;28us;21us;0us;16389us;1us;16394us;8us;22us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;2us;32768us;14us;17us;28us;21us;0us;16390us;5us;32768us;2us;37us;3us;35us;10us;19us;15us;34us;16us;36us;4us;32768us;11us;11us;13us;14us;25us;7us;29us;4us;1us;16392us;28us;21us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;5us;32768us;2us;37us;3us;35us;9us;24us;15us;34us;16us;36us;0us;16393us;0us;16395us;0us;16396us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;0us;16397us;0us;16398us;0us;16399us;2us;16400us;3us;35us;15us;34us;2us;16401us;3us;35us;15us;34us;5us;32768us;2us;37us;3us;35us;15us;34us;16us;36us;23us;54us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;9us;32768us;4us;46us;5us;40us;6us;44us;7us;42us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;10us;32768us;4us;46us;5us;40us;6us;44us;7us;42us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;23us;73us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;5us;16402us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;5us;32768us;5us;49us;20us;68us;22us;72us;29us;71us;30us;70us;5us;16403us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;5us;32768us;5us;51us;20us;68us;22us;72us;29us;71us;30us;70us;5us;16404us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;1us;32768us;5us;47us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;5us;16405us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;5us;16406us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;5us;16407us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;7us;32768us;0us;25us;1us;26us;4us;27us;20us;68us;22us;53us;29us;71us;30us;70us;0us;16408us;1us;16409us;21us;66us;1us;16410us;21us;66us;3us;16411us;17us;62us;18us;63us;21us;66us;3us;16412us;17us;62us;18us;63us;21us;66us;1us;16413us;21us;66us;6us;32768us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;23us;73us;6us;32768us;9us;75us;17us;62us;18us;63us;19us;64us;20us;65us;21us;66us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;0us;16414us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;0us;16415us;0us;16416us;1us;16417us;8us;74us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;0us;16418us;4us;32768us;20us;68us;22us;72us;29us;71us;30us;70us;0us;16419us;|]
let _fsyacc_actionTableRowOffsets = [|0us;5us;6us;9us;10us;12us;17us;23us;24us;26us;28us;33us;41us;44us;45us;47us;55us;58us;59us;65us;70us;72us;80us;88us;94us;95us;96us;97us;105us;106us;107us;108us;111us;114us;120us;128us;136us;144us;152us;162us;173us;178us;184us;190us;196us;202us;208us;210us;215us;221us;226us;232us;237us;243us;251us;252us;254us;256us;260us;264us;266us;273us;280us;285us;290us;295us;300us;305us;306us;311us;312us;313us;315us;320us;321us;326us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;3us;1us;3us;3us;4us;3us;3us;3us;0us;1us;1us;2us;3us;3us;3us;3us;3us;3us;3us;4us;4us;4us;3us;3us;3us;3us;3us;3us;1us;2us;1us;1us;3us;4us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;3us;3us;4us;4us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;6us;6us;6us;6us;6us;6us;7us;7us;7us;7us;7us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;65535us;16387us;65535us;65535us;65535us;65535us;65535us;16389us;65535us;65535us;65535us;16390us;65535us;65535us;65535us;65535us;65535us;65535us;16393us;16395us;16396us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16408us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16414us;65535us;16415us;16416us;65535us;65535us;16418us;65535us;16419us;|]
let _fsyacc_reductions = lazy [|
# 287 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart_command));
# 296 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser/Parser.fsy"
                                                   _1 
                   )
# 31 "Parser/Parser.fsy"
                 : AST.command));
# 307 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser/Parser.fsy"
                                                                     Assignment(Variable(_1), _3) 
                   )
# 34 "Parser/Parser.fsy"
                 : AST.command));
# 319 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser/Parser.fsy"
                                                                     Skip 
                   )
# 35 "Parser/Parser.fsy"
                 : AST.command));
# 329 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.command in
            let _3 = parseState.GetInput(3) :?> AST.command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser/Parser.fsy"
                                                                     Sequence(_1, _3) 
                   )
# 36 "Parser/Parser.fsy"
                 : AST.command));
# 341 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.guarded in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser/Parser.fsy"
                                                                     If(_2) 
                   )
# 37 "Parser/Parser.fsy"
                 : AST.command));
# 352 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.invariant in
            let _3 = parseState.GetInput(3) :?> AST.guarded in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser/Parser.fsy"
                                                                     Do(_3, _2) 
                   )
# 38 "Parser/Parser.fsy"
                 : AST.command));
# 364 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser/Parser.fsy"
                                                           Arrow(_1, _3) 
                   )
# 41 "Parser/Parser.fsy"
                 : AST.guarded));
# 376 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.guarded in
            let _3 = parseState.GetInput(3) :?> AST.guarded in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser/Parser.fsy"
                                                                       Guard(_1, _3)
                   )
# 42 "Parser/Parser.fsy"
                 : AST.guarded));
# 388 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser/Parser.fsy"
                                                   Some(_2)
                   )
# 45 "Parser/Parser.fsy"
                 : AST.invariant));
# 399 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser/Parser.fsy"
                                                   None 
                   )
# 46 "Parser/Parser.fsy"
                 : AST.invariant));
# 409 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser/Parser.fsy"
                                                           Value(true) 
                   )
# 49 "Parser/Parser.fsy"
                 : AST.boolean));
# 419 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser/Parser.fsy"
                                                           Value(false) 
                   )
# 50 "Parser/Parser.fsy"
                 : AST.boolean));
# 429 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser/Parser.fsy"
                                                           Not(_2) 
                   )
# 51 "Parser/Parser.fsy"
                 : AST.boolean));
# 440 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser/Parser.fsy"
                                                           LogAnd(_1,_3) 
                   )
# 52 "Parser/Parser.fsy"
                 : AST.boolean));
# 452 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser/Parser.fsy"
                                                           BitAnd(_1,_3) 
                   )
# 53 "Parser/Parser.fsy"
                 : AST.boolean));
# 464 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser/Parser.fsy"
                                                           LogOr(_1,_3) 
                   )
# 54 "Parser/Parser.fsy"
                 : AST.boolean));
# 476 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser/Parser.fsy"
                                                           BitOr(_1,_3) 
                   )
# 55 "Parser/Parser.fsy"
                 : AST.boolean));
# 488 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser/Parser.fsy"
                                                                           Equal(_1,_3) 
                   )
# 56 "Parser/Parser.fsy"
                 : AST.boolean));
# 500 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser/Parser.fsy"
                                                                           Less(_1,_3) 
                   )
# 57 "Parser/Parser.fsy"
                 : AST.boolean));
# 512 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser/Parser.fsy"
                                                                           Greater(_1,_3) 
                   )
# 58 "Parser/Parser.fsy"
                 : AST.boolean));
# 524 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _4 = parseState.GetInput(4) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser/Parser.fsy"
                                                                           NotEqual(_1,_4) 
                   )
# 59 "Parser/Parser.fsy"
                 : AST.boolean));
# 536 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _4 = parseState.GetInput(4) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser/Parser.fsy"
                                                                           LessEqual(_1,_4) 
                   )
# 60 "Parser/Parser.fsy"
                 : AST.boolean));
# 548 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _4 = parseState.GetInput(4) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser/Parser.fsy"
                                                                           GreaterEqual(_1,_4) 
                   )
# 61 "Parser/Parser.fsy"
                 : AST.boolean));
# 560 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser/Parser.fsy"
                                                                           _2 
                   )
# 62 "Parser/Parser.fsy"
                 : AST.boolean));
# 571 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser/Parser.fsy"
                                                               TimesExpr(_1,_3) 
                   )
# 67 "Parser/Parser.fsy"
                 : AST.expr));
# 583 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser/Parser.fsy"
                                                               DivExpr(_1,_3) 
                   )
# 68 "Parser/Parser.fsy"
                 : AST.expr));
# 595 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser/Parser.fsy"
                                                               PlusExpr(_1,_3) 
                   )
# 69 "Parser/Parser.fsy"
                 : AST.expr));
# 607 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser/Parser.fsy"
                                                               MinusExpr(_1,_3) 
                   )
# 70 "Parser/Parser.fsy"
                 : AST.expr));
# 619 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser/Parser.fsy"
                                                               PowExpr(_1,_3) 
                   )
# 71 "Parser/Parser.fsy"
                 : AST.expr));
# 631 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser/Parser.fsy"
                                                               _1 
                   )
# 72 "Parser/Parser.fsy"
                 : AST.expr));
# 642 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser/Parser.fsy"
                                                              UMinusExpr(_2) 
                   )
# 75 "Parser/Parser.fsy"
                 : AST.expr));
# 653 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser/Parser.fsy"
                                                              Num(_1) 
                   )
# 76 "Parser/Parser.fsy"
                 : AST.expr));
# 664 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser/Parser.fsy"
                                                              Variable(_1) 
                   )
# 77 "Parser/Parser.fsy"
                 : AST.expr));
# 675 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser/Parser.fsy"
                                                              _2 
                   )
# 78 "Parser/Parser.fsy"
                 : AST.expr));
# 686 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser/Parser.fsy"
                                                              Array(_1,_3) 
                   )
# 79 "Parser/Parser.fsy"
                 : AST.expr));
|]
# 699 "Parser/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start_command lexer lexbuf : AST.command =
    engine lexer lexbuf 0 :?> _
