// Signature file for parser generated by fsyacc
module Parser
type token = 
  | TRUE
  | FALSE
  | BITOR
  | BITAND
  | NOT
  | EQUALS
  | GREATER
  | LESS
  | LBRACK
  | RBRACK
  | ARROW
  | IF
  | FI
  | DO
  | OD
  | LOGAND
  | LOGOR
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAREN
  | RPAREN
  | EOF
  | SKIP
  | SEMI
  | ASSIGN
  | GUARD
  | IDENT of (string)
  | NUM of (int)
type tokenId = 
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BITOR
    | TOKEN_BITAND
    | TOKEN_NOT
    | TOKEN_EQUALS
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_ARROW
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_LOGAND
    | TOKEN_LOGOR
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EOF
    | TOKEN_SKIP
    | TOKEN_SEMI
    | TOKEN_ASSIGN
    | TOKEN_GUARD
    | TOKEN_IDENT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart_command
    | NONTERM_start_command
    | NONTERM_command
    | NONTERM_guarded_command
    | NONTERM_invariant
    | NONTERM_boolean
    | NONTERM_expression_0
    | NONTERM_expression_1
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start_command : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (AST.command) 
