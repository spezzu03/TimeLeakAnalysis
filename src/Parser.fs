// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TRUE
  | FALSE
  | BITOR
  | BITAND
  | NOT
  | EQUALS
  | GREATER
  | LESS
  | LBRACK
  | RBRACK
  | ARROW
  | IF
  | FI
  | DO
  | OD
  | LOGAND
  | LOGOR
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAREN
  | RPAREN
  | EOF
  | SKIP
  | SEMI
  | ASSIGN
  | GUARD
  | IDENT of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BITOR
    | TOKEN_BITAND
    | TOKEN_NOT
    | TOKEN_EQUALS
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_ARROW
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_LOGAND
    | TOKEN_LOGOR
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EOF
    | TOKEN_SKIP
    | TOKEN_SEMI
    | TOKEN_ASSIGN
    | TOKEN_GUARD
    | TOKEN_IDENT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart_command
    | NONTERM_start_command
    | NONTERM_command
    | NONTERM_guarded_command
    | NONTERM_boolean
    | NONTERM_expression_0
    | NONTERM_expression_1

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TRUE  -> 0 
  | FALSE  -> 1 
  | BITOR  -> 2 
  | BITAND  -> 3 
  | NOT  -> 4 
  | EQUALS  -> 5 
  | GREATER  -> 6 
  | LESS  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | ARROW  -> 10 
  | IF  -> 11 
  | FI  -> 12 
  | DO  -> 13 
  | OD  -> 14 
  | LOGAND  -> 15 
  | LOGOR  -> 16 
  | TIMES  -> 17 
  | DIV  -> 18 
  | PLUS  -> 19 
  | MINUS  -> 20 
  | POW  -> 21 
  | LPAREN  -> 22 
  | RPAREN  -> 23 
  | EOF  -> 24 
  | SKIP  -> 25 
  | SEMI  -> 26 
  | ASSIGN  -> 27 
  | GUARD  -> 28 
  | IDENT _ -> 29 
  | NUM _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TRUE 
  | 1 -> TOKEN_FALSE 
  | 2 -> TOKEN_BITOR 
  | 3 -> TOKEN_BITAND 
  | 4 -> TOKEN_NOT 
  | 5 -> TOKEN_EQUALS 
  | 6 -> TOKEN_GREATER 
  | 7 -> TOKEN_LESS 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_ARROW 
  | 11 -> TOKEN_IF 
  | 12 -> TOKEN_FI 
  | 13 -> TOKEN_DO 
  | 14 -> TOKEN_OD 
  | 15 -> TOKEN_LOGAND 
  | 16 -> TOKEN_LOGOR 
  | 17 -> TOKEN_TIMES 
  | 18 -> TOKEN_DIV 
  | 19 -> TOKEN_PLUS 
  | 20 -> TOKEN_MINUS 
  | 21 -> TOKEN_POW 
  | 22 -> TOKEN_LPAREN 
  | 23 -> TOKEN_RPAREN 
  | 24 -> TOKEN_EOF 
  | 25 -> TOKEN_SKIP 
  | 26 -> TOKEN_SEMI 
  | 27 -> TOKEN_ASSIGN 
  | 28 -> TOKEN_GUARD 
  | 29 -> TOKEN_IDENT 
  | 30 -> TOKEN_NUM 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart_command 
    | 1 -> NONTERM_start_command 
    | 2 -> NONTERM_command 
    | 3 -> NONTERM_command 
    | 4 -> NONTERM_command 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_guarded_command 
    | 8 -> NONTERM_guarded_command 
    | 9 -> NONTERM_boolean 
    | 10 -> NONTERM_boolean 
    | 11 -> NONTERM_boolean 
    | 12 -> NONTERM_boolean 
    | 13 -> NONTERM_boolean 
    | 14 -> NONTERM_boolean 
    | 15 -> NONTERM_boolean 
    | 16 -> NONTERM_boolean 
    | 17 -> NONTERM_boolean 
    | 18 -> NONTERM_boolean 
    | 19 -> NONTERM_boolean 
    | 20 -> NONTERM_boolean 
    | 21 -> NONTERM_boolean 
    | 22 -> NONTERM_boolean 
    | 23 -> NONTERM_expression_0 
    | 24 -> NONTERM_expression_0 
    | 25 -> NONTERM_expression_0 
    | 26 -> NONTERM_expression_0 
    | 27 -> NONTERM_expression_0 
    | 28 -> NONTERM_expression_0 
    | 29 -> NONTERM_expression_1 
    | 30 -> NONTERM_expression_1 
    | 31 -> NONTERM_expression_1 
    | 32 -> NONTERM_expression_1 
    | 33 -> NONTERM_expression_1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | BITOR  -> "BITOR" 
  | BITAND  -> "BITAND" 
  | NOT  -> "NOT" 
  | EQUALS  -> "EQUALS" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | ARROW  -> "ARROW" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | LOGAND  -> "LOGAND" 
  | LOGOR  -> "LOGOR" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | EOF  -> "EOF" 
  | SKIP  -> "SKIP" 
  | SEMI  -> "SEMI" 
  | ASSIGN  -> "ASSIGN" 
  | GUARD  -> "GUARD" 
  | IDENT _ -> "IDENT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | BITOR  -> (null : System.Object) 
  | BITAND  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | LOGAND  -> (null : System.Object) 
  | LOGOR  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | GUARD  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;3us;65535us;0us;2us;10us;8us;18us;9us;3us;65535us;11us;12us;14us;15us;20us;19us;9us;65535us;11us;17us;14us;17us;20us;17us;23us;24us;30us;25us;31us;26us;32us;27us;33us;28us;49us;29us;23us;65535us;5us;6us;11us;34us;14us;34us;20us;34us;23us;34us;30us;34us;31us;34us;32us;34us;33us;34us;36us;37us;38us;39us;40us;41us;43us;44us;45us;46us;47us;48us;49us;35us;58us;51us;59us;52us;60us;53us;61us;54us;62us;55us;68us;56us;70us;57us;24us;65535us;5us;63us;11us;63us;14us;63us;20us;63us;23us;63us;30us;63us;31us;63us;32us;63us;33us;63us;36us;63us;38us;63us;40us;63us;43us;63us;45us;63us;47us;63us;49us;63us;58us;63us;59us;63us;60us;63us;61us;63us;62us;63us;64us;65us;68us;63us;70us;63us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;7us;11us;21us;45us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;4us;1us;1us;1us;2us;1us;2us;6us;2us;23us;24us;25us;26us;27us;1us;3us;2us;4us;4us;2us;4us;7us;1us;4us;1us;5us;2us;5us;8us;1us;5us;1us;6us;2us;6us;8us;1us;6us;5us;7us;12us;13us;14us;15us;1us;7us;2us;8us;8us;1us;8us;1us;9us;1us;10us;1us;11us;5us;11us;12us;13us;14us;15us;5us;12us;12us;13us;14us;15us;5us;12us;13us;13us;14us;15us;5us;12us;13us;14us;14us;15us;5us;12us;13us;14us;15us;15us;5us;12us;13us;14us;15us;22us;1us;12us;1us;13us;1us;14us;1us;15us;11us;16us;17us;18us;19us;20us;21us;23us;24us;25us;26us;27us;12us;16us;17us;18us;19us;20us;21us;23us;24us;25us;26us;27us;32us;1us;16us;6us;16us;23us;24us;25us;26us;27us;2us;17us;20us;6us;17us;23us;24us;25us;26us;27us;2us;18us;21us;6us;18us;23us;24us;25us;26us;27us;1us;19us;1us;19us;6us;19us;23us;24us;25us;26us;27us;1us;20us;6us;20us;23us;24us;25us;26us;27us;1us;21us;6us;21us;23us;24us;25us;26us;27us;2us;22us;32us;1us;22us;6us;23us;23us;24us;25us;26us;27us;6us;23us;24us;24us;25us;26us;27us;6us;23us;24us;25us;25us;26us;27us;6us;23us;24us;25us;26us;26us;27us;6us;23us;24us;25us;26us;27us;27us;6us;23us;24us;25us;26us;27us;32us;6us;23us;24us;25us;26us;27us;33us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;29us;1us;30us;2us;31us;33us;1us;32us;1us;32us;1us;33us;1us;33us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;13us;20us;22us;25us;28us;30us;32us;35us;37us;39us;42us;44us;50us;52us;55us;57us;59us;61us;63us;69us;75us;81us;87us;93us;99us;101us;103us;105us;107us;119us;132us;134us;141us;144us;151us;154us;161us;163us;165us;172us;174us;181us;183us;190us;193us;195us;202us;209us;216us;223us;230us;237us;244us;246us;248us;250us;252us;254us;256us;258us;260us;262us;265us;267us;269us;271us;|]
let _fsyacc_action_rows = 72
let _fsyacc_actionTableElements = [|4us;32768us;11us;11us;13us;14us;25us;7us;29us;4us;0us;49152us;2us;32768us;24us;3us;26us;10us;0us;16385us;1us;32768us;27us;5us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;5us;16386us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;0us;16387us;1us;16388us;26us;10us;1us;16391us;26us;10us;4us;32768us;11us;11us;13us;14us;25us;7us;29us;4us;7us;32768us;0us;21us;1us;22us;4us;23us;20us;64us;22us;49us;29us;67us;30us;66us;2us;32768us;12us;13us;28us;20us;0us;16389us;7us;32768us;0us;21us;1us;22us;4us;23us;20us;64us;22us;49us;29us;67us;30us;66us;2us;32768us;14us;16us;28us;20us;0us;16390us;5us;32768us;2us;33us;3us;31us;10us;18us;15us;30us;16us;32us;4us;32768us;11us;11us;13us;14us;25us;7us;29us;4us;1us;16392us;28us;20us;7us;32768us;0us;21us;1us;22us;4us;23us;20us;64us;22us;49us;29us;67us;30us;66us;0us;16393us;0us;16394us;7us;32768us;0us;21us;1us;22us;4us;23us;20us;64us;22us;49us;29us;67us;30us;66us;0us;16395us;0us;16396us;0us;16397us;2us;16398us;3us;31us;15us;30us;2us;16399us;3us;31us;15us;30us;5us;32768us;2us;33us;3us;31us;15us;30us;16us;32us;23us;50us;7us;32768us;0us;21us;1us;22us;4us;23us;20us;64us;22us;49us;29us;67us;30us;66us;7us;32768us;0us;21us;1us;22us;4us;23us;20us;64us;22us;49us;29us;67us;30us;66us;7us;32768us;0us;21us;1us;22us;4us;23us;20us;64us;22us;49us;29us;67us;30us;66us;7us;32768us;0us;21us;1us;22us;4us;23us;20us;64us;22us;49us;29us;67us;30us;66us;9us;32768us;4us;42us;5us;36us;6us;40us;7us;38us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;10us;32768us;4us;42us;5us;36us;6us;40us;7us;38us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;23us;69us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;5us;16400us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;5us;32768us;5us;45us;20us;64us;22us;68us;29us;67us;30us;66us;5us;16401us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;5us;32768us;5us;47us;20us;64us;22us;68us;29us;67us;30us;66us;5us;16402us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;1us;32768us;5us;43us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;5us;16403us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;5us;16404us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;5us;16405us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;7us;32768us;0us;21us;1us;22us;4us;23us;20us;64us;22us;49us;29us;67us;30us;66us;0us;16406us;1us;16407us;21us;62us;1us;16408us;21us;62us;3us;16409us;17us;58us;18us;59us;21us;62us;3us;16410us;17us;58us;18us;59us;21us;62us;1us;16411us;21us;62us;6us;32768us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;23us;69us;6us;32768us;9us;71us;17us;58us;18us;59us;19us;60us;20us;61us;21us;62us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;0us;16412us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;0us;16413us;0us;16414us;1us;16415us;8us;70us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;0us;16416us;4us;32768us;20us;64us;22us;68us;29us;67us;30us;66us;0us;16417us;|]
let _fsyacc_actionTableRowOffsets = [|0us;5us;6us;9us;10us;12us;17us;23us;24us;26us;28us;33us;41us;44us;45us;53us;56us;57us;63us;68us;70us;78us;79us;80us;88us;89us;90us;91us;94us;97us;103us;111us;119us;127us;135us;145us;156us;161us;167us;173us;179us;185us;191us;193us;198us;204us;209us;215us;220us;226us;234us;235us;237us;239us;243us;247us;249us;256us;263us;268us;273us;278us;283us;288us;289us;294us;295us;296us;298us;303us;304us;309us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;3us;1us;3us;3us;3us;3us;3us;1us;1us;2us;3us;3us;3us;3us;3us;3us;3us;4us;4us;4us;3us;3us;3us;3us;3us;3us;1us;2us;1us;1us;3us;4us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;3us;3us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;5us;5us;5us;5us;5us;5us;6us;6us;6us;6us;6us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;65535us;16387us;65535us;65535us;65535us;65535us;65535us;16389us;65535us;65535us;16390us;65535us;65535us;65535us;65535us;16393us;16394us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16406us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16412us;65535us;16413us;16414us;65535us;65535us;16416us;65535us;16417us;|]
let _fsyacc_reductions = lazy [|
# 284 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart_command));
# 293 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                   _1 
                   )
# 30 "Parser.fsy"
                 : AST.command));
# 304 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                           Assignment(Variable(_1), _3) 
                   )
# 33 "Parser.fsy"
                 : AST.command));
# 316 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                           Skip 
                   )
# 34 "Parser.fsy"
                 : AST.command));
# 326 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.command in
            let _3 = parseState.GetInput(3) :?> AST.command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                           Sequence(_1, _3) 
                   )
# 35 "Parser.fsy"
                 : AST.command));
# 338 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.guarded in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                           If(_2) 
                   )
# 36 "Parser.fsy"
                 : AST.command));
# 349 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.guarded in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                           Do(_2) 
                   )
# 37 "Parser.fsy"
                 : AST.command));
# 360 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                           Arrow(_1, _3) 
                   )
# 40 "Parser.fsy"
                 : AST.guarded));
# 372 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.guarded in
            let _3 = parseState.GetInput(3) :?> AST.guarded in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                                       Guard(_1, _3)
                   )
# 41 "Parser.fsy"
                 : AST.guarded));
# 384 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                           Value(true) 
                   )
# 44 "Parser.fsy"
                 : AST.boolean));
# 394 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                           Value(false) 
                   )
# 45 "Parser.fsy"
                 : AST.boolean));
# 404 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                           Not(_2) 
                   )
# 46 "Parser.fsy"
                 : AST.boolean));
# 415 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                           LogAnd(_1,_3) 
                   )
# 47 "Parser.fsy"
                 : AST.boolean));
# 427 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                           BitAnd(_1,_3) 
                   )
# 48 "Parser.fsy"
                 : AST.boolean));
# 439 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                           LogOr(_1,_3) 
                   )
# 49 "Parser.fsy"
                 : AST.boolean));
# 451 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.boolean in
            let _3 = parseState.GetInput(3) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                           BitOr(_1,_3) 
                   )
# 50 "Parser.fsy"
                 : AST.boolean));
# 463 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                           Equal(_1,_3) 
                   )
# 51 "Parser.fsy"
                 : AST.boolean));
# 475 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                           Less(_1,_3) 
                   )
# 52 "Parser.fsy"
                 : AST.boolean));
# 487 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                           Greater(_1,_3) 
                   )
# 53 "Parser.fsy"
                 : AST.boolean));
# 499 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _4 = parseState.GetInput(4) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                           NotEqual(_1,_4) 
                   )
# 54 "Parser.fsy"
                 : AST.boolean));
# 511 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _4 = parseState.GetInput(4) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                                           LessEqual(_1,_4) 
                   )
# 55 "Parser.fsy"
                 : AST.boolean));
# 523 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _4 = parseState.GetInput(4) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                                           GreaterEqual(_1,_4) 
                   )
# 56 "Parser.fsy"
                 : AST.boolean));
# 535 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                                           _2 
                   )
# 57 "Parser.fsy"
                 : AST.boolean));
# 546 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                               TimesExpr(_1,_3) 
                   )
# 62 "Parser.fsy"
                 : AST.expr));
# 558 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                               DivExpr(_1,_3) 
                   )
# 63 "Parser.fsy"
                 : AST.expr));
# 570 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                               PlusExpr(_1,_3) 
                   )
# 64 "Parser.fsy"
                 : AST.expr));
# 582 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                               MinusExpr(_1,_3) 
                   )
# 65 "Parser.fsy"
                 : AST.expr));
# 594 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                               PowExpr(_1,_3) 
                   )
# 66 "Parser.fsy"
                 : AST.expr));
# 606 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                               _1 
                   )
# 67 "Parser.fsy"
                 : AST.expr));
# 617 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                              UMinusExpr(_2) 
                   )
# 70 "Parser.fsy"
                 : AST.expr));
# 628 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                              Num(_1) 
                   )
# 71 "Parser.fsy"
                 : AST.expr));
# 639 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                              Variable(_1) 
                   )
# 72 "Parser.fsy"
                 : AST.expr));
# 650 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                              _2 
                   )
# 73 "Parser.fsy"
                 : AST.expr));
# 661 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                              Array(_1,_3) 
                   )
# 74 "Parser.fsy"
                 : AST.expr));
|]
# 674 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start_command lexer lexbuf : AST.command =
    engine lexer lexbuf 0 :?> _
